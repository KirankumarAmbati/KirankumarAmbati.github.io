<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[@kirankumarambati]]></title><description><![CDATA[Kirankumar Ambati writes his learnings out here]]></description><link>https://kirankumarambati.me</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 27 May 2020 07:48:34 GMT</lastBuildDate><item><title><![CDATA[ES Next Series - 3. var, let or const ?]]></title><description><![CDATA[Ever since ES6 has introduced  and , there has been a constant battle of which one to use in which case. There are different opinions on…]]></description><link>https://kirankumarambati.me/es-next/var-let-constant/</link><guid isPermaLink="false">https://kirankumarambati.me/es-next/var-let-constant/</guid><pubDate>Thu, 09 May 2019 10:28:52 GMT</pubDate><content:encoded>&lt;p&gt;Ever since ES6 has introduced &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;, there has been a constant battle of which one to use in which case. There are different opinions on this. Putting that aside, let us explore the differences and on how to use them in different scenarios.&lt;/p&gt;
&lt;h1&gt;tl;dr&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Use &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt;&lt;/strong&gt; when you are not going to reassign the variable to another reference.
Use &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt;&lt;/strong&gt;  in all other cases.
Never use &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;. Period.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;var&lt;/h1&gt;
&lt;p&gt;It is being used ever since JavaScript came into existence. So, it is very much familiar to all the developers.&lt;/p&gt;
&lt;p&gt;Here are few points about &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; is global/function scoped.&lt;/li&gt;
&lt;li&gt;Variables declared with &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; are hoisted (Topic for another article) and can be referrenced before it’s declaration.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;let&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; is a new keyword introduced in ES6, which is similar to &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; with some added advantages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; is block-scoped.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/blob/master/content/blog/es-next/var-let-constant/images/let_block_scope.png?raw=true&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; Variable declared outside of any function will be treated as global variable, same as &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; with a difference. Variable declared as &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; will not be added to Window object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/blob/master/content/blog/es-next/var-let-constant/images/let_globe.png?raw=true&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variable declared as &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; can NOT be redeclared.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/blob/master/content/blog/es-next/var-let-constant/images/let_hoisting.png?raw=true&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variable declared as &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; will NOT be hoisted. The region from the start of the block, till the declaration of variable is called &lt;strong&gt;Temporal Dead Zone&lt;/strong&gt;. The variable can not be accessed in this temporal dead zone. It can only be used once it is declared.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/blob/master/content/blog/es-next/var-let-constant/images/let_hoisting.png?raw=true&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h1&gt;const&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; has to be initialized when it is declared.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/blob/master/content/blog/es-next/var-let-constant/images/const_no_init.png?raw=true&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; makes a variable reference immutable. ie. you can NOT reassign a const with another reference.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/blob/master/content/blog/es-next/var-let-constant/images/const_reassign.png?raw=true&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Pitfall:&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; makes variable reference immutable but not it’s value. ie. properties of an object declared using &lt;code class=&quot;language-text&quot;&gt;const&lt;/code&gt; can be modified.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/blob/master/content/blog/es-next/var-let-constant/images/const_prop_change.png?raw=true&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h1&gt;Closures&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/blob/master/content/blog/es-next/var-let-constant/images/let_closures.png?raw=true&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt; &lt;code class=&quot;language-text&quot;&gt;var&lt;/code&gt; makes the variable &lt;code class=&quot;language-text&quot;&gt;i&lt;/code&gt; closed over the loop whereas &lt;code class=&quot;language-text&quot;&gt;let&lt;/code&gt; makes the variable block-scoped.&lt;/p&gt;
&lt;p&gt;Hope you liked this article. If I miss any important point, please drop a comment so that the users won’t miss that. :)&lt;/p&gt;
&lt;p&gt;If you enjoy this article, please express your LOVE by liking it and sharing it to others. That keeps me motivated and helps me in writing more such articles. Thank you!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[ES Next Series - 2. The FAT Arrow]]></title><description><![CDATA[Arrow functions or the FAT arrow functions were introduced as a part of ES6. Along with making a regular function more concise, it has more…]]></description><link>https://kirankumarambati.me/es-next/arrow-functions/</link><guid isPermaLink="false">https://kirankumarambati.me/es-next/arrow-functions/</guid><pubDate>Tue, 09 Apr 2019 10:28:52 GMT</pubDate><content:encoded>&lt;p&gt;Arrow functions or the &lt;strong&gt;FAT&lt;/strong&gt; arrow functions were introduced as a part of ES6. Along with making a regular function more concise, it has more features added to it. Let’s dive deep into them in this article.&lt;/p&gt;
&lt;h1&gt;tl;dr&lt;/h1&gt;
&lt;p&gt;Functions are mainly used in 3 ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Object methods&lt;/li&gt;
&lt;li&gt;Non-methods&lt;/li&gt;
&lt;li&gt;Constructors&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Use regular functions for methods and constructors. Use arrow functions for non-methods. In other words, arrow functions are to be used when we need lexical &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;&lt;/strong&gt; and regular functions are to be used when we need dynamic &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lets get into details&lt;/p&gt;
&lt;h2&gt;Syntax&lt;/h2&gt;
&lt;p&gt;Arrow functions have a concise syntax and make the function more easy to read.&lt;/p&gt;
&lt;p&gt;Eg:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;vs&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;users&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Usage of arrow function with parameters:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;No param:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;() =&amp;gt; {} // paranthesis are mandatory&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One param:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;(param) =&amp;gt; {}&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;&lt;em&gt;OR&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;param =&amp;gt; {} // paranthesis are optional here&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More than one param:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;(param1, param2) =&amp;gt; {} // paranthesis are mandatory&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Implicit VS Explicit return:&lt;/h3&gt;
&lt;p&gt;Using arrow functions, we can return the required value from a function in two different ways: implicit and explicit.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Implicit return: &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;var x = () =&amp;gt; 2 // Value 2 is returned from function implicitly when invoked without us writing a return statement&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Explicit return:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// explicitly returning 2.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Apart from having the concise method syntax, an arrow function do NOT have access to &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;arguments&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;super&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;new.target&lt;/code&gt; inside it. No need of binding &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; to a method while invoking it is a boon as well as a bane depending on the place where an arrow function is used.&lt;/p&gt;
&lt;h3&gt;Advantages&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;No need to bind &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Methods are concise and easier to understand&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Pitfalls:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;We can &lt;strong&gt;NOT&lt;/strong&gt; return a JS object implicitly. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ie. &lt;code class=&quot;language-text&quot;&gt;() =&amp;gt; {} // This fails since this signature is same as the empty function with explicit return.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To make it work as expected, the returning object has to be wrapped within paranthesis. The function signature look like:&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;() =&amp;gt; ({}) // this works as expected&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Arrows functions can &lt;strong&gt;NOT&lt;/strong&gt; be used as object methods.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; character1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    lives&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;hitObject&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lives&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

character1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hitObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;character1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// {lives: 9, hitObject: f}&lt;/span&gt;


&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; character2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    lives&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;hitObject&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lives&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

character2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hitObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;character2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// {lives: 10, hitObject: f}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The logged output in the second case is different from expected. This happens because &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; binding in arrow function happens differently than in the regular functions.&lt;/p&gt;
&lt;p&gt;In regular function, &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; is determined by the context of the function call. ie. &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; inside hitObject method points to &lt;code class=&quot;language-text&quot;&gt;character1&lt;/code&gt; object when invoked as &lt;code class=&quot;language-text&quot;&gt;character1.hitObject()&lt;/code&gt;. But in the second case, &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt; is not pointed &lt;code class=&quot;language-text&quot;&gt;character2&lt;/code&gt;, instead it points to &lt;code class=&quot;language-text&quot;&gt;Window&lt;/code&gt; object. &lt;code class=&quot;language-text&quot;&gt;this&lt;/code&gt;, in case of arrow function, is determined by the lexical scope where the object is declared ie. global &lt;code class=&quot;language-text&quot;&gt;Window&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Arrow functions can &lt;strong&gt;NOT&lt;/strong&gt; be used as constructors.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;PersonNormal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PersonNormal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// returns an empty object {}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above lines works perfectly well. But the below code doesn’t.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;PersonArrow&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PersonArrow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Uncaught TypeError: PersonArrow is not a constructor&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;new&lt;/code&gt; keyword failed because arrow functions do &lt;strong&gt;NOT&lt;/strong&gt; have __ &lt;strong&gt;proto&lt;/strong&gt; __ and hence they don’t support inheritance. To verify this fact, &lt;code class=&quot;language-text&quot;&gt;console.log(PersonArrow.prototype)&lt;/code&gt; and verify. The output will be &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;yield&lt;/code&gt; can &lt;strong&gt;NOT&lt;/strong&gt; be used within an arrow function and hence arrow functions can &lt;strong&gt;NOT&lt;/strong&gt; be used as &lt;code class=&quot;language-text&quot;&gt;generators&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The above code fails. Instead, the splitting can be done as:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    c&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is done by keeping the future improvements in mind. It is expected that ‘headless’ arrow functions may be introduced in the later versions of JavaScript. ie. We may have arrow functions that look like &lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;=&amp;gt; 2 // No params&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If that is the case, the above example &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;will be interpreted differently and the code becomes buggy. Hence, the restriction.&lt;/p&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;The arrow function has an ‘arrow’. Hence, it has to be used with some extra caution when used with other operators.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Uncaught SyntaxError: Malformed arrow function parameter list&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// function&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In case 1, typeof has higher precedence than = and hence execution happens differently than expected. To avoid that, we have to wrap the arrow function in paranthesis, as in case 2.&lt;/p&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;Arrow functions are &lt;strong&gt;anonymous&lt;/strong&gt;. Hence, they are:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;a. Harder debugging.&lt;/p&gt;
&lt;p&gt;b. No-self referencing.&lt;/p&gt;
&lt;p&gt;Thank you for making till the end of this lengthy article.&lt;/p&gt;
&lt;p&gt;If you enjoy this article, please express your LOVE by liking it and sharing it to others. That keeps me motivated and helps me in writing more such articles. Thank you!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[ES Next Series - 1. Introduction]]></title><description><![CDATA[JavaScript remained unchanged for many years. There were no major updates to the language until ES6 got released in 2015. ES6 and next…]]></description><link>https://kirankumarambati.me/es-next/introduction/</link><guid isPermaLink="false">https://kirankumarambati.me/es-next/introduction/</guid><pubDate>Mon, 01 Apr 2019 10:28:52 GMT</pubDate><content:encoded>&lt;p&gt;JavaScript remained unchanged for many years. There were no major updates to the language until ES6 got released in 2015. ES6 and next versions introduced lot of new features to JS. This series is an introduction to the features the ES Next had introduced to the JS world. Hope you guys like it !&lt;/p&gt;</content:encoded></item><item><title><![CDATA[PNPM - The minified NPM]]></title><description><![CDATA[In this present world of web development, almost everyone might have heard the word  node_modules They are very popular. They came with lot…]]></description><link>https://kirankumarambati.me/pnpm/</link><guid isPermaLink="false">https://kirankumarambati.me/pnpm/</guid><pubDate>Wed, 20 Mar 2019 10:28:52 GMT</pubDate><content:encoded>&lt;p&gt;In this present world of web development, almost everyone might have heard the word &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;node_modules&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They are very popular. They came with lot of advantages over CDNs. They made offline development possible. They made web development much easier and faster.&lt;/p&gt;
&lt;p&gt;But, &lt;strong&gt;node_modules&lt;/strong&gt; come with a con. They occupy space.. A lot of space. For e.g. &lt;code class=&quot;language-text&quot;&gt;create-react-app&lt;/code&gt; alone occupies &lt;strong&gt;~232MB&lt;/strong&gt; of disk space. They are making offline development possible and hence this overhead looks fine. I was happy with node&lt;em&gt;modules until I noticed some pattern one day. I have over 30 projects on my Laptop and node&lt;/em&gt;modules alone occupied 8-10GB of my space. This made me think. Why we should have the exact copy of node_modules in every project I created. Don’t we have a provision to store everything at a single location and refer them from there.So, I started exploring and that lead me to PNPM.&lt;/p&gt;
&lt;h2&gt;pnpm&lt;/h2&gt;
&lt;p&gt;pnpm is an efficient solution to above discussed problem. It installs the required package only once in a common place and whenever we install that package in any project using &lt;code class=&quot;language-text&quot;&gt;npm install package-name&lt;/code&gt;, a hard link will be placed within node_modules folder of the project instead of installing package there. This way, it maintains only one version of each module and can effectively save lot of space in the long run.&lt;/p&gt;
&lt;h2&gt;USAGE&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;installation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npm install -g pnpm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It’s as simple as that. Usage is also pretty simple. It is very easy to get switched to pnpm from npm or yarn because the commands are still gonna be the same.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;pnpm run dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;pnpm install packageName&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;pnpm run build&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;etc..&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Added advantage&lt;/h2&gt;
&lt;p&gt;pnpm comes with an added benefit apart from saving space. It is faster than npm &amp;#x26; yarn. See the benchmark results &lt;a href=&quot;https://github.com/pnpm/benchmarks-of-javascript-package-managers&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Overall, I’m having great experience using pnpm. Hope you guys also like using it. &lt;/p&gt;
&lt;p&gt;If you found the article useful, please like, share and subscribe to my newsletter. That motivates me to write more..!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/tree/master/content/blog/pnpm/index.md&quot;&gt;edit this page on github&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[NVM To The Rescue]]></title><description><![CDATA[Node has become a part of most of our coding lives. But if we are working on latest technologies like React and at the same time working on…]]></description><link>https://kirankumarambati.me/nvm-setup/</link><guid isPermaLink="false">https://kirankumarambati.me/nvm-setup/</guid><pubDate>Tue, 26 Feb 2019 11:31:52 GMT</pubDate><content:encoded>&lt;p&gt;Node has become a part of most of our coding lives. But if we are working on latest technologies like React and at the same time working on your legacy code, you might have noticed that you have switch between two versions of Node. For instance, I was working with node v6.10.2 for my company project and node v10.15.0 for my personal learnings. I used to uninstall and install those versions based on my requirements until I found NVM.&lt;/p&gt;
&lt;h2&gt;NVM - Node Version Manager&lt;/h2&gt;
&lt;p&gt;NVM stands for “Node Version Manager”. NVM helps us to handle multiple versions of node very easily by giving us the ability to switch between them based on our requirement.&lt;/p&gt;
&lt;h4&gt;Let us look at the setup&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Installing nvm&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For installing &lt;em&gt;nvm&lt;/em&gt;, head over &lt;a href=&quot;https://github.com/coreybutler/nvm-windows/releases&quot;&gt;here&lt;/a&gt; and download the latest stable nvm setup file (&lt;code class=&quot;language-text&quot;&gt;nvm-setup.zip&lt;/code&gt;). At the time of writing this article, the stable version is &lt;strong&gt;&lt;em&gt;1.1.7&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Download the .zip file and extract .exe from it and proceed with installation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Installing nodejs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We have done with the installation of nvm. Now we have to install our required node versions. For example, if we need latest node version along with v6.10.2, we have to do:&lt;/p&gt;
&lt;p&gt;For istalling latest nodejs version, run &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;$ nvm install latest&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For istalling specific version of nodejs, run &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;$ nvm install 6.10.2&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;restart your Command Prompt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;p&gt;Now we have both the versions of node installed on to our system. To verify which versions are present, run
&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;$ nvm list&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;which lists down all your versions oresent on your syaytem.&lt;/p&gt;
&lt;p&gt;To switch between versions, just run &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;$ nvm use &amp;lt;node_version_you_want_to_use&amp;gt;&lt;/code&gt;&lt;/strong&gt;. For eg,&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;$ nvm use 10.15.0&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are now switched to Node v10.15.0. To verify, try running&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;$ node -v&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;that should return you the version we have choosen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;That’s all folks ! Now we are good to keep rocking with our coding.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; One important thing to remember when we are using nvm, the global space of each node version is different. i.e., if you have some node modules installed globally for one version of node, they won’t be accessible to other versions. You have to install them seperately on those versions too.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/tree/master/content/blog/nvm-setup/index.md&quot;&gt;edit this page on github&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Inception]]></title><description><![CDATA[Hello world! Ever since I started learning, there is a huge passion for teaching started growing inside me. I always wanted to teach others…]]></description><link>https://kirankumarambati.me/inception-post/</link><guid isPermaLink="false">https://kirankumarambati.me/inception-post/</guid><pubDate>Mon, 25 Feb 2019 11:31:52 GMT</pubDate><content:encoded>&lt;p&gt;Hello world!&lt;/p&gt;
&lt;p&gt;Ever since I started learning, there is a huge passion for teaching started growing inside me. I always wanted to teach others what I learn. I taught few around me about JS and React but I believe there are still more people who need guidance in approaching new technologies. That gives birth to this blog.&lt;/p&gt;
&lt;p&gt;I always wanted to have a blog but it took me this much time to get the ball rolling due to my busy schedule (or I’m too lazy to get started :p) Anyways finally its here. From now on, whatever I learn, be it a small concept like arrow function or more complex concepts like closures or prototypes, I’m going to share with you.&lt;/p&gt;
&lt;p&gt;(Shhh… I’m going to share with only you. Yeah! Only you. Not to everyone. Lucky you! ;))&lt;/p&gt;
&lt;p&gt;If you would like to read an article on some topic or if you would like to send me some feedback/love, feel free to drop a message to &lt;a href=&quot;mailto:ambatikirankumar4@gmail.com&quot;&gt;me&lt;/a&gt; ! Happy Learning!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/tree/master/content/blog/inception-post/index.md&quot;&gt;edit this page on github&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>