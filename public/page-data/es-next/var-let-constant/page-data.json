{"componentChunkName":"component---src-templates-blog-post-js","path":"/es-next/var-let-constant/","result":{"data":{"site":{"siteMetadata":{"title":"@kirankumarambati","author":"Kirankumar Ambati","siteUrl":"https://kirankumarambati.me","social":{"twitter":"_sudo_user"}}},"markdownRemark":{"id":"9f8680ee-44f9-5051-80cd-9e539bdccec3","excerpt":"Ever since ES6 has introduced  and , there has been a constant battle of which one to use in which case. There are different opinions on this. Putting that…","html":"<p>Ever since ES6 has introduced <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code>, there has been a constant battle of which one to use in which case. There are different opinions on this. Putting that aside, let us explore the differences and on how to use them in different scenarios.</p>\n<h1>tl;dr</h1>\n<blockquote>\n<p>Use <strong><code class=\"language-text\">const</code></strong> when you are not going to reassign the variable to another reference.\nUse <strong><code class=\"language-text\">let</code></strong>  in all other cases.\nNever use <code class=\"language-text\">var</code>. Period.</p>\n</blockquote>\n<h1>var</h1>\n<p>It is being used ever since JavaScript came into existence. So, it is very much familiar to all the developers.</p>\n<p>Here are few points about <code class=\"language-text\">var</code>:</p>\n<ul>\n<li><code class=\"language-text\">var</code> is global/function scoped.</li>\n<li>Variables declared with <code class=\"language-text\">var</code> are hoisted (Topic for another article) and can be referrenced before it’s declaration.</li>\n</ul>\n<h1>let</h1>\n<p><code class=\"language-text\">let</code> is a new keyword introduced in ES6, which is similar to <code class=\"language-text\">var</code> with some added advantages.</p>\n<ul>\n<li><code class=\"language-text\">let</code> is block-scoped.</li>\n</ul>\n<p><img src=\"https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/blob/master/content/blog/es-next/var-let-constant/images/let_block_scope.png?raw=true\" alt=\"image\"></p>\n<ul>\n<li><code class=\"language-text\">let</code> Variable declared outside of any function will be treated as global variable, same as <code class=\"language-text\">var</code> with a difference. Variable declared as <code class=\"language-text\">let</code> will not be added to Window object.</li>\n</ul>\n<p><img src=\"https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/blob/master/content/blog/es-next/var-let-constant/images/let_globe.png?raw=true\" alt=\"image\"></p>\n<ul>\n<li>Variable declared as <code class=\"language-text\">let</code> can NOT be redeclared.</li>\n</ul>\n<p><img src=\"https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/blob/master/content/blog/es-next/var-let-constant/images/let_hoisting.png?raw=true\" alt=\"image\"></p>\n<ul>\n<li>Variable declared as <code class=\"language-text\">let</code> will NOT be hoisted. The region from the start of the block, till the declaration of variable is called <strong>Temporal Dead Zone</strong>. The variable can not be accessed in this temporal dead zone. It can only be used once it is declared.</li>\n</ul>\n<p><img src=\"https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/blob/master/content/blog/es-next/var-let-constant/images/let_hoisting.png?raw=true\" alt=\"image\"></p>\n<h1>const</h1>\n<ul>\n<li><code class=\"language-text\">const</code> has to be initialized when it is declared.</li>\n</ul>\n<p><img src=\"https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/blob/master/content/blog/es-next/var-let-constant/images/const_no_init.png?raw=true\" alt=\"image\"></p>\n<ul>\n<li><code class=\"language-text\">const</code> makes a variable reference immutable. ie. you can NOT reassign a const with another reference.</li>\n</ul>\n<p><img src=\"https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/blob/master/content/blog/es-next/var-let-constant/images/const_reassign.png?raw=true\" alt=\"image\"></p>\n<h3>Pitfall:</h3>\n<p><code class=\"language-text\">const</code> makes variable reference immutable but not it’s value. ie. properties of an object declared using <code class=\"language-text\">const</code> can be modified.</p>\n<p><img src=\"https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/blob/master/content/blog/es-next/var-let-constant/images/const_prop_change.png?raw=true\" alt=\"image\"></p>\n<h1>Closures</h1>\n<p><img src=\"https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/blob/master/content/blog/es-next/var-let-constant/images/let_closures.png?raw=true\" alt=\"image\"></p>\n<p><strong>Explanation:</strong> <code class=\"language-text\">var</code> makes the variable <code class=\"language-text\">i</code> closed over the loop whereas <code class=\"language-text\">let</code> makes the variable block-scoped.</p>\n<p>Hope you liked this article. If I miss any important point, please drop a comment so that the users won’t miss that. :)</p>\n<p>If you enjoy this article, please express your LOVE by liking it and sharing it to others. That keeps me motivated and helps me in writing more such articles. Thank you!</p>","frontmatter":{"title":"ES Next Series - 3. var, let or const ?","date":"May 09, 2019","tags":["JavaScript","JS","ES6","ES7","ES8","ESNext","var","let","const","Usage of var, let and const","Latest feature of JavaScript","Latest feature of ECMAScript"]}}},"pageContext":{"slug":"/es-next/var-let-constant/","previous":{"fields":{"slug":"/es-next/arrow-functions/"},"frontmatter":{"title":"ES Next Series - 2. The FAT Arrow"}},"next":null}}}