{"componentChunkName":"component---src-templates-blog-post-js","path":"/pnpm/","result":{"data":{"site":{"siteMetadata":{"title":"@kirankumarambati","author":"Kirankumar Ambati","siteUrl":"https://kirankumarambati.me","social":{"twitter":"_sudo_user"}}},"markdownRemark":{"id":"92ac249b-fce7-52f4-876b-31d5b8fd5d26","excerpt":"In this present world of web development, almost everyone might have heard the word  node_modules They are very popular. They came with lot of advantages over…","html":"<p>In this present world of web development, almost everyone might have heard the word </p>\n<blockquote>\n<p>node_modules</p>\n</blockquote>\n<p>They are very popular. They came with lot of advantages over CDNs. They made offline development possible. They made web development much easier and faster.</p>\n<p>But, <strong>node_modules</strong> come with a con. They occupy space.. A lot of space. For e.g. <code class=\"language-text\">create-react-app</code> alone occupies <strong>~232MB</strong> of disk space. They are making offline development possible and hence this overhead looks fine. I was happy with node<em>modules until I noticed some pattern one day. I have over 30 projects on my Laptop and node</em>modules alone occupied 8-10GB of my space. This made me think. Why we should have the exact copy of node_modules in every project I created. Don’t we have a provision to store everything at a single location and refer them from there.So, I started exploring and that lead me to PNPM.</p>\n<h2>pnpm</h2>\n<p>pnpm is an efficient solution to above discussed problem. It installs the required package only once in a common place and whenever we install that package in any project using <code class=\"language-text\">npm install package-name</code>, a hard link will be placed within node_modules folder of the project instead of installing package there. This way, it maintains only one version of each module and can effectively save lot of space in the long run.</p>\n<h2>USAGE</h2>\n<ul>\n<li>\n<p><strong>installation</strong></p>\n<p><code class=\"language-text\">npm install -g pnpm</code></p>\n<p>It’s as simple as that. Usage is also pretty simple. It is very easy to get switched to pnpm from npm or yarn because the commands are still gonna be the same.</p>\n<p><code class=\"language-text\">pnpm run dev</code></p>\n<p><code class=\"language-text\">pnpm install packageName</code></p>\n<p><code class=\"language-text\">pnpm run build</code></p>\n<p>etc..</p>\n</li>\n</ul>\n<h2>Added advantage</h2>\n<p>pnpm comes with an added benefit apart from saving space. It is faster than npm &#x26; yarn. See the benchmark results <a href=\"https://github.com/pnpm/benchmarks-of-javascript-package-managers\">here</a></p>\n<p>Overall, I’m having great experience using pnpm. Hope you guys also like using it. </p>\n<p>If you found the article useful, please like, share and subscribe to my newsletter. That motivates me to write more..!</p>\n<p><a href=\"https://github.com/KirankumarAmbati/KirankumarAmbati.github.io/tree/master/content/blog/pnpm/index.md\">edit this page on github</a></p>","frontmatter":{"title":"PNPM - The minified NPM","date":"March 20, 2019","tags":["Node","NVM","NodeJS","Node Version Manager","Solution to growing Node Modules"]}}},"pageContext":{"slug":"/pnpm/","previous":{"fields":{"slug":"/nvm-setup/"},"frontmatter":{"title":"NVM To The Rescue"}},"next":{"fields":{"slug":"/es-next/introduction/"},"frontmatter":{"title":"ES Next Series - 1. Introduction"}}}}}